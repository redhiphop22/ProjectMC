// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_PROTOCOL_PROTOCOL_H_
#define FLATBUFFERS_GENERATED_PROTOCOL_PROTOCOL_H_

#include "flatbuffers/flatbuffers.h"

#include "Common_generated.h"
#include "Result_generated.h"

namespace protocol {

struct RESULT_S2C;
struct RESULT_S2CBuilder;

struct CONNECT_RESULT_C2S;
struct CONNECT_RESULT_C2SBuilder;

struct CONNECT_RESULT_S2C;
struct CONNECT_RESULT_S2CBuilder;

struct LOGIN_C2S;
struct LOGIN_C2SBuilder;

struct LOGIN_S2C;
struct LOGIN_S2CBuilder;

struct SERVER_CONNECT_C2S;
struct SERVER_CONNECT_C2SBuilder;

struct SERVER_CONNECT_S2C;
struct SERVER_CONNECT_S2CBuilder;

struct HEART_BEAT_C2S;
struct HEART_BEAT_C2SBuilder;

struct HEART_BEAT_S2C;
struct HEART_BEAT_S2CBuilder;

struct ENTER_LOBBY_C2S;
struct ENTER_LOBBY_C2SBuilder;

struct ENTER_LOBBY_S2C;
struct ENTER_LOBBY_S2CBuilder;

struct CHARACTER_INFO_C2S;
struct CHARACTER_INFO_C2SBuilder;

struct CHARACTER_INFO_S2C;
struct CHARACTER_INFO_S2CBuilder;

struct CHARACTER_NAME_DUPLICATION_C2S;
struct CHARACTER_NAME_DUPLICATION_C2SBuilder;

struct CHARACTER_NAME_DUPLICATION_S2C;
struct CHARACTER_NAME_DUPLICATION_S2CBuilder;

struct CHARACTER_CREATE_C2S;
struct CHARACTER_CREATE_C2SBuilder;

struct CHARACTER_CREATE_S2C;
struct CHARACTER_CREATE_S2CBuilder;

struct ENTER_MAP_C2S;
struct ENTER_MAP_C2SBuilder;

struct ENTER_MAP_S2C;
struct ENTER_MAP_S2CBuilder;

struct ENTITY_SPAWN_S2C;
struct ENTITY_SPAWN_S2CBuilder;

struct ENTITY_DESTROY_S2C;
struct ENTITY_DESTROY_S2CBuilder;

struct ENTITY_MOVE_VELOCITY_C2S;
struct ENTITY_MOVE_VELOCITY_C2SBuilder;

struct ENTITY_MOVE_VELOCITY_S2C;
struct ENTITY_MOVE_VELOCITY_S2CBuilder;

struct ENTITY_MOVE_STOP_C2S;
struct ENTITY_MOVE_STOP_C2SBuilder;

struct ENTITY_MOVE_STOP_S2C;
struct ENTITY_MOVE_STOP_S2CBuilder;

enum MESSAGE : uint16_t {
  MESSAGE_RESULT_S2C = 3,
  MESSAGE_CONNECT_RESULT_C2S = 4,
  MESSAGE_CONNECT_RESULT_S2C = 5,
  MESSAGE_LOGIN_C2S = 6,
  MESSAGE_LOGIN_S2C = 7,
  MESSAGE_SERVER_CONNECT_C2S = 8,
  MESSAGE_SERVER_CONNECT_S2C = 9,
  MESSAGE_HEART_BEAT_C2S = 10,
  MESSAGE_HEART_BEAT_S2C = 11,
  MESSAGE_ENTER_LOBBY_C2S = 12,
  MESSAGE_ENTER_LOBBY_S2C = 13,
  MESSAGE_CHARACTER_INFO_C2S = 14,
  MESSAGE_CHARACTER_INFO_S2C = 15,
  MESSAGE_CHARACTER_NAME_DUPLICATION_C2S = 16,
  MESSAGE_CHARACTER_NAME_DUPLICATION_S2C = 17,
  MESSAGE_CHARACTER_CREATE_C2S = 18,
  MESSAGE_CHARACTER_CREATE_S2C = 19,
  MESSAGE_ENTER_MAP_C2S = 20,
  MESSAGE_ENTER_MAP_S2C = 21,
  MESSAGE_ENTITY_SPAWN_S2C = 22,
  MESSAGE_ENTITY_DESTROY_S2C = 23,
  MESSAGE_ENTITY_MOVE_VELOCITY_C2S = 24,
  MESSAGE_ENTITY_MOVE_VELOCITY_S2C = 25,
  MESSAGE_ENTITY_MOVE_STOP_C2S = 26,
  MESSAGE_ENTITY_MOVE_STOP_S2C = 27,
  MESSAGE_MIN = MESSAGE_RESULT_S2C,
  MESSAGE_MAX = MESSAGE_ENTITY_MOVE_STOP_S2C
};

inline const MESSAGE (&EnumValuesMESSAGE())[25] {
  static const MESSAGE values[] = {
    MESSAGE_RESULT_S2C,
    MESSAGE_CONNECT_RESULT_C2S,
    MESSAGE_CONNECT_RESULT_S2C,
    MESSAGE_LOGIN_C2S,
    MESSAGE_LOGIN_S2C,
    MESSAGE_SERVER_CONNECT_C2S,
    MESSAGE_SERVER_CONNECT_S2C,
    MESSAGE_HEART_BEAT_C2S,
    MESSAGE_HEART_BEAT_S2C,
    MESSAGE_ENTER_LOBBY_C2S,
    MESSAGE_ENTER_LOBBY_S2C,
    MESSAGE_CHARACTER_INFO_C2S,
    MESSAGE_CHARACTER_INFO_S2C,
    MESSAGE_CHARACTER_NAME_DUPLICATION_C2S,
    MESSAGE_CHARACTER_NAME_DUPLICATION_S2C,
    MESSAGE_CHARACTER_CREATE_C2S,
    MESSAGE_CHARACTER_CREATE_S2C,
    MESSAGE_ENTER_MAP_C2S,
    MESSAGE_ENTER_MAP_S2C,
    MESSAGE_ENTITY_SPAWN_S2C,
    MESSAGE_ENTITY_DESTROY_S2C,
    MESSAGE_ENTITY_MOVE_VELOCITY_C2S,
    MESSAGE_ENTITY_MOVE_VELOCITY_S2C,
    MESSAGE_ENTITY_MOVE_STOP_C2S,
    MESSAGE_ENTITY_MOVE_STOP_S2C
  };
  return values;
}

inline const char * const *EnumNamesMESSAGE() {
  static const char * const names[26] = {
    "RESULT_S2C",
    "CONNECT_RESULT_C2S",
    "CONNECT_RESULT_S2C",
    "LOGIN_C2S",
    "LOGIN_S2C",
    "SERVER_CONNECT_C2S",
    "SERVER_CONNECT_S2C",
    "HEART_BEAT_C2S",
    "HEART_BEAT_S2C",
    "ENTER_LOBBY_C2S",
    "ENTER_LOBBY_S2C",
    "CHARACTER_INFO_C2S",
    "CHARACTER_INFO_S2C",
    "CHARACTER_NAME_DUPLICATION_C2S",
    "CHARACTER_NAME_DUPLICATION_S2C",
    "CHARACTER_CREATE_C2S",
    "CHARACTER_CREATE_S2C",
    "ENTER_MAP_C2S",
    "ENTER_MAP_S2C",
    "ENTITY_SPAWN_S2C",
    "ENTITY_DESTROY_S2C",
    "ENTITY_MOVE_VELOCITY_C2S",
    "ENTITY_MOVE_VELOCITY_S2C",
    "ENTITY_MOVE_STOP_C2S",
    "ENTITY_MOVE_STOP_S2C",
    nullptr
  };
  return names;
}

inline const char *EnumNameMESSAGE(MESSAGE e) {
  if (flatbuffers::IsOutRange(e, MESSAGE_RESULT_S2C, MESSAGE_ENTITY_MOVE_STOP_S2C)) return "";
  const size_t index = static_cast<size_t>(e) - static_cast<size_t>(MESSAGE_RESULT_S2C);
  return EnumNamesMESSAGE()[index];
}

struct RESULT_S2C FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef RESULT_S2CBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PROTOCOL = 4,
    VT_RESULT = 6
  };
  uint16_t protocol() const {
    return GetField<uint16_t>(VT_PROTOCOL, 0);
  }
  common::RESULT_CODE result() const {
    return static_cast<common::RESULT_CODE>(GetField<uint32_t>(VT_RESULT, 0));
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint16_t>(verifier, VT_PROTOCOL) &&
           VerifyField<uint32_t>(verifier, VT_RESULT) &&
           verifier.EndTable();
  }
};

struct RESULT_S2CBuilder {
  typedef RESULT_S2C Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_protocol(uint16_t protocol) {
    fbb_.AddElement<uint16_t>(RESULT_S2C::VT_PROTOCOL, protocol, 0);
  }
  void add_result(common::RESULT_CODE result) {
    fbb_.AddElement<uint32_t>(RESULT_S2C::VT_RESULT, static_cast<uint32_t>(result), 0);
  }
  explicit RESULT_S2CBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<RESULT_S2C> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<RESULT_S2C>(end);
    return o;
  }
};

inline flatbuffers::Offset<RESULT_S2C> CreateRESULT_S2C(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint16_t protocol = 0,
    common::RESULT_CODE result = common::RESULT_CODE_ERROR_FAIL) {
  RESULT_S2CBuilder builder_(_fbb);
  builder_.add_result(result);
  builder_.add_protocol(protocol);
  return builder_.Finish();
}

struct CONNECT_RESULT_C2S FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef CONNECT_RESULT_C2SBuilder Builder;
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct CONNECT_RESULT_C2SBuilder {
  typedef CONNECT_RESULT_C2S Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  explicit CONNECT_RESULT_C2SBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<CONNECT_RESULT_C2S> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<CONNECT_RESULT_C2S>(end);
    return o;
  }
};

inline flatbuffers::Offset<CONNECT_RESULT_C2S> CreateCONNECT_RESULT_C2S(
    flatbuffers::FlatBufferBuilder &_fbb) {
  CONNECT_RESULT_C2SBuilder builder_(_fbb);
  return builder_.Finish();
}

struct CONNECT_RESULT_S2C FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef CONNECT_RESULT_S2CBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_RESULT = 4
  };
  common::RESULT_CODE result() const {
    return static_cast<common::RESULT_CODE>(GetField<uint32_t>(VT_RESULT, 0));
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_RESULT) &&
           verifier.EndTable();
  }
};

struct CONNECT_RESULT_S2CBuilder {
  typedef CONNECT_RESULT_S2C Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_result(common::RESULT_CODE result) {
    fbb_.AddElement<uint32_t>(CONNECT_RESULT_S2C::VT_RESULT, static_cast<uint32_t>(result), 0);
  }
  explicit CONNECT_RESULT_S2CBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<CONNECT_RESULT_S2C> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<CONNECT_RESULT_S2C>(end);
    return o;
  }
};

inline flatbuffers::Offset<CONNECT_RESULT_S2C> CreateCONNECT_RESULT_S2C(
    flatbuffers::FlatBufferBuilder &_fbb,
    common::RESULT_CODE result = common::RESULT_CODE_ERROR_FAIL) {
  CONNECT_RESULT_S2CBuilder builder_(_fbb);
  builder_.add_result(result);
  return builder_.Finish();
}

struct LOGIN_C2S FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef LOGIN_C2SBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_PW = 6
  };
  const flatbuffers::String *id() const {
    return GetPointer<const flatbuffers::String *>(VT_ID);
  }
  const flatbuffers::String *pw() const {
    return GetPointer<const flatbuffers::String *>(VT_PW);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.VerifyString(id()) &&
           VerifyOffset(verifier, VT_PW) &&
           verifier.VerifyString(pw()) &&
           verifier.EndTable();
  }
};

struct LOGIN_C2SBuilder {
  typedef LOGIN_C2S Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(flatbuffers::Offset<flatbuffers::String> id) {
    fbb_.AddOffset(LOGIN_C2S::VT_ID, id);
  }
  void add_pw(flatbuffers::Offset<flatbuffers::String> pw) {
    fbb_.AddOffset(LOGIN_C2S::VT_PW, pw);
  }
  explicit LOGIN_C2SBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<LOGIN_C2S> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<LOGIN_C2S>(end);
    return o;
  }
};

inline flatbuffers::Offset<LOGIN_C2S> CreateLOGIN_C2S(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> id = 0,
    flatbuffers::Offset<flatbuffers::String> pw = 0) {
  LOGIN_C2SBuilder builder_(_fbb);
  builder_.add_pw(pw);
  builder_.add_id(id);
  return builder_.Finish();
}

inline flatbuffers::Offset<LOGIN_C2S> CreateLOGIN_C2SDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *id = nullptr,
    const char *pw = nullptr) {
  auto id__ = id ? _fbb.CreateString(id) : 0;
  auto pw__ = pw ? _fbb.CreateString(pw) : 0;
  return protocol::CreateLOGIN_C2S(
      _fbb,
      id__,
      pw__);
}

struct LOGIN_S2C FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef LOGIN_S2CBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_RESULT = 4,
    VT_UID = 6
  };
  common::RESULT_CODE result() const {
    return static_cast<common::RESULT_CODE>(GetField<uint32_t>(VT_RESULT, 0));
  }
  uint64_t uid() const {
    return GetField<uint64_t>(VT_UID, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_RESULT) &&
           VerifyField<uint64_t>(verifier, VT_UID) &&
           verifier.EndTable();
  }
};

struct LOGIN_S2CBuilder {
  typedef LOGIN_S2C Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_result(common::RESULT_CODE result) {
    fbb_.AddElement<uint32_t>(LOGIN_S2C::VT_RESULT, static_cast<uint32_t>(result), 0);
  }
  void add_uid(uint64_t uid) {
    fbb_.AddElement<uint64_t>(LOGIN_S2C::VT_UID, uid, 0);
  }
  explicit LOGIN_S2CBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<LOGIN_S2C> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<LOGIN_S2C>(end);
    return o;
  }
};

inline flatbuffers::Offset<LOGIN_S2C> CreateLOGIN_S2C(
    flatbuffers::FlatBufferBuilder &_fbb,
    common::RESULT_CODE result = common::RESULT_CODE_ERROR_FAIL,
    uint64_t uid = 0) {
  LOGIN_S2CBuilder builder_(_fbb);
  builder_.add_uid(uid);
  builder_.add_result(result);
  return builder_.Finish();
}

struct SERVER_CONNECT_C2S FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef SERVER_CONNECT_C2SBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_UID = 4,
    VT_ID = 6
  };
  uint64_t uid() const {
    return GetField<uint64_t>(VT_UID, 0);
  }
  const flatbuffers::String *id() const {
    return GetPointer<const flatbuffers::String *>(VT_ID);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_UID) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.VerifyString(id()) &&
           verifier.EndTable();
  }
};

struct SERVER_CONNECT_C2SBuilder {
  typedef SERVER_CONNECT_C2S Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_uid(uint64_t uid) {
    fbb_.AddElement<uint64_t>(SERVER_CONNECT_C2S::VT_UID, uid, 0);
  }
  void add_id(flatbuffers::Offset<flatbuffers::String> id) {
    fbb_.AddOffset(SERVER_CONNECT_C2S::VT_ID, id);
  }
  explicit SERVER_CONNECT_C2SBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<SERVER_CONNECT_C2S> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<SERVER_CONNECT_C2S>(end);
    return o;
  }
};

inline flatbuffers::Offset<SERVER_CONNECT_C2S> CreateSERVER_CONNECT_C2S(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t uid = 0,
    flatbuffers::Offset<flatbuffers::String> id = 0) {
  SERVER_CONNECT_C2SBuilder builder_(_fbb);
  builder_.add_uid(uid);
  builder_.add_id(id);
  return builder_.Finish();
}

inline flatbuffers::Offset<SERVER_CONNECT_C2S> CreateSERVER_CONNECT_C2SDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t uid = 0,
    const char *id = nullptr) {
  auto id__ = id ? _fbb.CreateString(id) : 0;
  return protocol::CreateSERVER_CONNECT_C2S(
      _fbb,
      uid,
      id__);
}

struct SERVER_CONNECT_S2C FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef SERVER_CONNECT_S2CBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_RESULT = 4,
    VT_UID = 6,
    VT_AUTHORITY = 8,
    VT_BLOCK_TYPE = 10,
    VT_BLOCK_DATE = 12,
    VT_SERVER_TIME = 14
  };
  common::RESULT_CODE result() const {
    return static_cast<common::RESULT_CODE>(GetField<uint32_t>(VT_RESULT, 0));
  }
  uint64_t uid() const {
    return GetField<uint64_t>(VT_UID, 0);
  }
  common::ACCOUNT_AUTHORITY authority() const {
    return static_cast<common::ACCOUNT_AUTHORITY>(GetField<uint8_t>(VT_AUTHORITY, 0));
  }
  common::ACCOUNT_BLOCK_TYPE block_type() const {
    return static_cast<common::ACCOUNT_BLOCK_TYPE>(GetField<uint8_t>(VT_BLOCK_TYPE, 0));
  }
  uint64_t block_date() const {
    return GetField<uint64_t>(VT_BLOCK_DATE, 0);
  }
  uint64_t server_time() const {
    return GetField<uint64_t>(VT_SERVER_TIME, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_RESULT) &&
           VerifyField<uint64_t>(verifier, VT_UID) &&
           VerifyField<uint8_t>(verifier, VT_AUTHORITY) &&
           VerifyField<uint8_t>(verifier, VT_BLOCK_TYPE) &&
           VerifyField<uint64_t>(verifier, VT_BLOCK_DATE) &&
           VerifyField<uint64_t>(verifier, VT_SERVER_TIME) &&
           verifier.EndTable();
  }
};

struct SERVER_CONNECT_S2CBuilder {
  typedef SERVER_CONNECT_S2C Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_result(common::RESULT_CODE result) {
    fbb_.AddElement<uint32_t>(SERVER_CONNECT_S2C::VT_RESULT, static_cast<uint32_t>(result), 0);
  }
  void add_uid(uint64_t uid) {
    fbb_.AddElement<uint64_t>(SERVER_CONNECT_S2C::VT_UID, uid, 0);
  }
  void add_authority(common::ACCOUNT_AUTHORITY authority) {
    fbb_.AddElement<uint8_t>(SERVER_CONNECT_S2C::VT_AUTHORITY, static_cast<uint8_t>(authority), 0);
  }
  void add_block_type(common::ACCOUNT_BLOCK_TYPE block_type) {
    fbb_.AddElement<uint8_t>(SERVER_CONNECT_S2C::VT_BLOCK_TYPE, static_cast<uint8_t>(block_type), 0);
  }
  void add_block_date(uint64_t block_date) {
    fbb_.AddElement<uint64_t>(SERVER_CONNECT_S2C::VT_BLOCK_DATE, block_date, 0);
  }
  void add_server_time(uint64_t server_time) {
    fbb_.AddElement<uint64_t>(SERVER_CONNECT_S2C::VT_SERVER_TIME, server_time, 0);
  }
  explicit SERVER_CONNECT_S2CBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<SERVER_CONNECT_S2C> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<SERVER_CONNECT_S2C>(end);
    return o;
  }
};

inline flatbuffers::Offset<SERVER_CONNECT_S2C> CreateSERVER_CONNECT_S2C(
    flatbuffers::FlatBufferBuilder &_fbb,
    common::RESULT_CODE result = common::RESULT_CODE_ERROR_FAIL,
    uint64_t uid = 0,
    common::ACCOUNT_AUTHORITY authority = common::ACCOUNT_AUTHORITY_GUEST,
    common::ACCOUNT_BLOCK_TYPE block_type = common::ACCOUNT_BLOCK_TYPE_NONE,
    uint64_t block_date = 0,
    uint64_t server_time = 0) {
  SERVER_CONNECT_S2CBuilder builder_(_fbb);
  builder_.add_server_time(server_time);
  builder_.add_block_date(block_date);
  builder_.add_uid(uid);
  builder_.add_result(result);
  builder_.add_block_type(block_type);
  builder_.add_authority(authority);
  return builder_.Finish();
}

struct HEART_BEAT_C2S FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef HEART_BEAT_C2SBuilder Builder;
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct HEART_BEAT_C2SBuilder {
  typedef HEART_BEAT_C2S Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  explicit HEART_BEAT_C2SBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<HEART_BEAT_C2S> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<HEART_BEAT_C2S>(end);
    return o;
  }
};

inline flatbuffers::Offset<HEART_BEAT_C2S> CreateHEART_BEAT_C2S(
    flatbuffers::FlatBufferBuilder &_fbb) {
  HEART_BEAT_C2SBuilder builder_(_fbb);
  return builder_.Finish();
}

struct HEART_BEAT_S2C FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef HEART_BEAT_S2CBuilder Builder;
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct HEART_BEAT_S2CBuilder {
  typedef HEART_BEAT_S2C Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  explicit HEART_BEAT_S2CBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<HEART_BEAT_S2C> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<HEART_BEAT_S2C>(end);
    return o;
  }
};

inline flatbuffers::Offset<HEART_BEAT_S2C> CreateHEART_BEAT_S2C(
    flatbuffers::FlatBufferBuilder &_fbb) {
  HEART_BEAT_S2CBuilder builder_(_fbb);
  return builder_.Finish();
}

struct ENTER_LOBBY_C2S FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ENTER_LOBBY_C2SBuilder Builder;
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct ENTER_LOBBY_C2SBuilder {
  typedef ENTER_LOBBY_C2S Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  explicit ENTER_LOBBY_C2SBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<ENTER_LOBBY_C2S> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ENTER_LOBBY_C2S>(end);
    return o;
  }
};

inline flatbuffers::Offset<ENTER_LOBBY_C2S> CreateENTER_LOBBY_C2S(
    flatbuffers::FlatBufferBuilder &_fbb) {
  ENTER_LOBBY_C2SBuilder builder_(_fbb);
  return builder_.Finish();
}

struct ENTER_LOBBY_S2C FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ENTER_LOBBY_S2CBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_RESULT = 4
  };
  common::RESULT_CODE result() const {
    return static_cast<common::RESULT_CODE>(GetField<uint32_t>(VT_RESULT, 0));
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_RESULT) &&
           verifier.EndTable();
  }
};

struct ENTER_LOBBY_S2CBuilder {
  typedef ENTER_LOBBY_S2C Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_result(common::RESULT_CODE result) {
    fbb_.AddElement<uint32_t>(ENTER_LOBBY_S2C::VT_RESULT, static_cast<uint32_t>(result), 0);
  }
  explicit ENTER_LOBBY_S2CBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<ENTER_LOBBY_S2C> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ENTER_LOBBY_S2C>(end);
    return o;
  }
};

inline flatbuffers::Offset<ENTER_LOBBY_S2C> CreateENTER_LOBBY_S2C(
    flatbuffers::FlatBufferBuilder &_fbb,
    common::RESULT_CODE result = common::RESULT_CODE_ERROR_FAIL) {
  ENTER_LOBBY_S2CBuilder builder_(_fbb);
  builder_.add_result(result);
  return builder_.Finish();
}

struct CHARACTER_INFO_C2S FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef CHARACTER_INFO_C2SBuilder Builder;
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct CHARACTER_INFO_C2SBuilder {
  typedef CHARACTER_INFO_C2S Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  explicit CHARACTER_INFO_C2SBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<CHARACTER_INFO_C2S> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<CHARACTER_INFO_C2S>(end);
    return o;
  }
};

inline flatbuffers::Offset<CHARACTER_INFO_C2S> CreateCHARACTER_INFO_C2S(
    flatbuffers::FlatBufferBuilder &_fbb) {
  CHARACTER_INFO_C2SBuilder builder_(_fbb);
  return builder_.Finish();
}

struct CHARACTER_INFO_S2C FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef CHARACTER_INFO_S2CBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_RESULT = 4,
    VT_NICK_NAME = 6,
    VT_TYPE = 8,
    VT_BELONG = 10,
    VT_FACE = 12,
    VT_EQUIPMENT = 14,
    VT_LAST_MAP_ID = 16,
    VT_LAST_MAP_POSITION = 18
  };
  common::RESULT_CODE result() const {
    return static_cast<common::RESULT_CODE>(GetField<uint32_t>(VT_RESULT, 0));
  }
  const flatbuffers::String *nick_name() const {
    return GetPointer<const flatbuffers::String *>(VT_NICK_NAME);
  }
  common::CHARACTER_TYPE type() const {
    return static_cast<common::CHARACTER_TYPE>(GetField<uint8_t>(VT_TYPE, 0));
  }
  uint16_t belong() const {
    return GetField<uint16_t>(VT_BELONG, 0);
  }
  const common::CHARACTER_FACE *face() const {
    return GetPointer<const common::CHARACTER_FACE *>(VT_FACE);
  }
  const flatbuffers::Vector<flatbuffers::Offset<common::CHARACTER_EQUIPMENT>> *equipment() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<common::CHARACTER_EQUIPMENT>> *>(VT_EQUIPMENT);
  }
  uint32_t last_map_id() const {
    return GetField<uint32_t>(VT_LAST_MAP_ID, 0);
  }
  const common::VECTOR3 *last_map_position() const {
    return GetStruct<const common::VECTOR3 *>(VT_LAST_MAP_POSITION);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_RESULT) &&
           VerifyOffset(verifier, VT_NICK_NAME) &&
           verifier.VerifyString(nick_name()) &&
           VerifyField<uint8_t>(verifier, VT_TYPE) &&
           VerifyField<uint16_t>(verifier, VT_BELONG) &&
           VerifyOffset(verifier, VT_FACE) &&
           verifier.VerifyTable(face()) &&
           VerifyOffset(verifier, VT_EQUIPMENT) &&
           verifier.VerifyVector(equipment()) &&
           verifier.VerifyVectorOfTables(equipment()) &&
           VerifyField<uint32_t>(verifier, VT_LAST_MAP_ID) &&
           VerifyField<common::VECTOR3>(verifier, VT_LAST_MAP_POSITION) &&
           verifier.EndTable();
  }
};

struct CHARACTER_INFO_S2CBuilder {
  typedef CHARACTER_INFO_S2C Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_result(common::RESULT_CODE result) {
    fbb_.AddElement<uint32_t>(CHARACTER_INFO_S2C::VT_RESULT, static_cast<uint32_t>(result), 0);
  }
  void add_nick_name(flatbuffers::Offset<flatbuffers::String> nick_name) {
    fbb_.AddOffset(CHARACTER_INFO_S2C::VT_NICK_NAME, nick_name);
  }
  void add_type(common::CHARACTER_TYPE type) {
    fbb_.AddElement<uint8_t>(CHARACTER_INFO_S2C::VT_TYPE, static_cast<uint8_t>(type), 0);
  }
  void add_belong(uint16_t belong) {
    fbb_.AddElement<uint16_t>(CHARACTER_INFO_S2C::VT_BELONG, belong, 0);
  }
  void add_face(flatbuffers::Offset<common::CHARACTER_FACE> face) {
    fbb_.AddOffset(CHARACTER_INFO_S2C::VT_FACE, face);
  }
  void add_equipment(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<common::CHARACTER_EQUIPMENT>>> equipment) {
    fbb_.AddOffset(CHARACTER_INFO_S2C::VT_EQUIPMENT, equipment);
  }
  void add_last_map_id(uint32_t last_map_id) {
    fbb_.AddElement<uint32_t>(CHARACTER_INFO_S2C::VT_LAST_MAP_ID, last_map_id, 0);
  }
  void add_last_map_position(const common::VECTOR3 *last_map_position) {
    fbb_.AddStruct(CHARACTER_INFO_S2C::VT_LAST_MAP_POSITION, last_map_position);
  }
  explicit CHARACTER_INFO_S2CBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<CHARACTER_INFO_S2C> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<CHARACTER_INFO_S2C>(end);
    return o;
  }
};

inline flatbuffers::Offset<CHARACTER_INFO_S2C> CreateCHARACTER_INFO_S2C(
    flatbuffers::FlatBufferBuilder &_fbb,
    common::RESULT_CODE result = common::RESULT_CODE_ERROR_FAIL,
    flatbuffers::Offset<flatbuffers::String> nick_name = 0,
    common::CHARACTER_TYPE type = common::CHARACTER_TYPE_NONE,
    uint16_t belong = 0,
    flatbuffers::Offset<common::CHARACTER_FACE> face = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<common::CHARACTER_EQUIPMENT>>> equipment = 0,
    uint32_t last_map_id = 0,
    const common::VECTOR3 *last_map_position = 0) {
  CHARACTER_INFO_S2CBuilder builder_(_fbb);
  builder_.add_last_map_position(last_map_position);
  builder_.add_last_map_id(last_map_id);
  builder_.add_equipment(equipment);
  builder_.add_face(face);
  builder_.add_nick_name(nick_name);
  builder_.add_result(result);
  builder_.add_belong(belong);
  builder_.add_type(type);
  return builder_.Finish();
}

inline flatbuffers::Offset<CHARACTER_INFO_S2C> CreateCHARACTER_INFO_S2CDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    common::RESULT_CODE result = common::RESULT_CODE_ERROR_FAIL,
    const char *nick_name = nullptr,
    common::CHARACTER_TYPE type = common::CHARACTER_TYPE_NONE,
    uint16_t belong = 0,
    flatbuffers::Offset<common::CHARACTER_FACE> face = 0,
    const std::vector<flatbuffers::Offset<common::CHARACTER_EQUIPMENT>> *equipment = nullptr,
    uint32_t last_map_id = 0,
    const common::VECTOR3 *last_map_position = 0) {
  auto nick_name__ = nick_name ? _fbb.CreateString(nick_name) : 0;
  auto equipment__ = equipment ? _fbb.CreateVector<flatbuffers::Offset<common::CHARACTER_EQUIPMENT>>(*equipment) : 0;
  return protocol::CreateCHARACTER_INFO_S2C(
      _fbb,
      result,
      nick_name__,
      type,
      belong,
      face,
      equipment__,
      last_map_id,
      last_map_position);
}

struct CHARACTER_NAME_DUPLICATION_C2S FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef CHARACTER_NAME_DUPLICATION_C2SBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NICK_NAME = 4
  };
  const flatbuffers::String *nick_name() const {
    return GetPointer<const flatbuffers::String *>(VT_NICK_NAME);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NICK_NAME) &&
           verifier.VerifyString(nick_name()) &&
           verifier.EndTable();
  }
};

struct CHARACTER_NAME_DUPLICATION_C2SBuilder {
  typedef CHARACTER_NAME_DUPLICATION_C2S Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_nick_name(flatbuffers::Offset<flatbuffers::String> nick_name) {
    fbb_.AddOffset(CHARACTER_NAME_DUPLICATION_C2S::VT_NICK_NAME, nick_name);
  }
  explicit CHARACTER_NAME_DUPLICATION_C2SBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<CHARACTER_NAME_DUPLICATION_C2S> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<CHARACTER_NAME_DUPLICATION_C2S>(end);
    return o;
  }
};

inline flatbuffers::Offset<CHARACTER_NAME_DUPLICATION_C2S> CreateCHARACTER_NAME_DUPLICATION_C2S(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> nick_name = 0) {
  CHARACTER_NAME_DUPLICATION_C2SBuilder builder_(_fbb);
  builder_.add_nick_name(nick_name);
  return builder_.Finish();
}

inline flatbuffers::Offset<CHARACTER_NAME_DUPLICATION_C2S> CreateCHARACTER_NAME_DUPLICATION_C2SDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *nick_name = nullptr) {
  auto nick_name__ = nick_name ? _fbb.CreateString(nick_name) : 0;
  return protocol::CreateCHARACTER_NAME_DUPLICATION_C2S(
      _fbb,
      nick_name__);
}

struct CHARACTER_NAME_DUPLICATION_S2C FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef CHARACTER_NAME_DUPLICATION_S2CBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_RESULT = 4,
    VT_NICK_NAME = 6
  };
  common::RESULT_CODE result() const {
    return static_cast<common::RESULT_CODE>(GetField<uint32_t>(VT_RESULT, 0));
  }
  const flatbuffers::String *nick_name() const {
    return GetPointer<const flatbuffers::String *>(VT_NICK_NAME);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_RESULT) &&
           VerifyOffset(verifier, VT_NICK_NAME) &&
           verifier.VerifyString(nick_name()) &&
           verifier.EndTable();
  }
};

struct CHARACTER_NAME_DUPLICATION_S2CBuilder {
  typedef CHARACTER_NAME_DUPLICATION_S2C Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_result(common::RESULT_CODE result) {
    fbb_.AddElement<uint32_t>(CHARACTER_NAME_DUPLICATION_S2C::VT_RESULT, static_cast<uint32_t>(result), 0);
  }
  void add_nick_name(flatbuffers::Offset<flatbuffers::String> nick_name) {
    fbb_.AddOffset(CHARACTER_NAME_DUPLICATION_S2C::VT_NICK_NAME, nick_name);
  }
  explicit CHARACTER_NAME_DUPLICATION_S2CBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<CHARACTER_NAME_DUPLICATION_S2C> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<CHARACTER_NAME_DUPLICATION_S2C>(end);
    return o;
  }
};

inline flatbuffers::Offset<CHARACTER_NAME_DUPLICATION_S2C> CreateCHARACTER_NAME_DUPLICATION_S2C(
    flatbuffers::FlatBufferBuilder &_fbb,
    common::RESULT_CODE result = common::RESULT_CODE_ERROR_FAIL,
    flatbuffers::Offset<flatbuffers::String> nick_name = 0) {
  CHARACTER_NAME_DUPLICATION_S2CBuilder builder_(_fbb);
  builder_.add_nick_name(nick_name);
  builder_.add_result(result);
  return builder_.Finish();
}

inline flatbuffers::Offset<CHARACTER_NAME_DUPLICATION_S2C> CreateCHARACTER_NAME_DUPLICATION_S2CDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    common::RESULT_CODE result = common::RESULT_CODE_ERROR_FAIL,
    const char *nick_name = nullptr) {
  auto nick_name__ = nick_name ? _fbb.CreateString(nick_name) : 0;
  return protocol::CreateCHARACTER_NAME_DUPLICATION_S2C(
      _fbb,
      result,
      nick_name__);
}

struct CHARACTER_CREATE_C2S FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef CHARACTER_CREATE_C2SBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NICK_NAME = 4,
    VT_TYPE = 6,
    VT_BELONG = 8,
    VT_FACE = 10,
    VT_EQUIPMENT = 12
  };
  const flatbuffers::String *nick_name() const {
    return GetPointer<const flatbuffers::String *>(VT_NICK_NAME);
  }
  common::CHARACTER_TYPE type() const {
    return static_cast<common::CHARACTER_TYPE>(GetField<uint8_t>(VT_TYPE, 0));
  }
  uint16_t belong() const {
    return GetField<uint16_t>(VT_BELONG, 0);
  }
  const common::CHARACTER_FACE *face() const {
    return GetPointer<const common::CHARACTER_FACE *>(VT_FACE);
  }
  const flatbuffers::Vector<flatbuffers::Offset<common::CHARACTER_EQUIPMENT>> *equipment() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<common::CHARACTER_EQUIPMENT>> *>(VT_EQUIPMENT);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NICK_NAME) &&
           verifier.VerifyString(nick_name()) &&
           VerifyField<uint8_t>(verifier, VT_TYPE) &&
           VerifyField<uint16_t>(verifier, VT_BELONG) &&
           VerifyOffset(verifier, VT_FACE) &&
           verifier.VerifyTable(face()) &&
           VerifyOffset(verifier, VT_EQUIPMENT) &&
           verifier.VerifyVector(equipment()) &&
           verifier.VerifyVectorOfTables(equipment()) &&
           verifier.EndTable();
  }
};

struct CHARACTER_CREATE_C2SBuilder {
  typedef CHARACTER_CREATE_C2S Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_nick_name(flatbuffers::Offset<flatbuffers::String> nick_name) {
    fbb_.AddOffset(CHARACTER_CREATE_C2S::VT_NICK_NAME, nick_name);
  }
  void add_type(common::CHARACTER_TYPE type) {
    fbb_.AddElement<uint8_t>(CHARACTER_CREATE_C2S::VT_TYPE, static_cast<uint8_t>(type), 0);
  }
  void add_belong(uint16_t belong) {
    fbb_.AddElement<uint16_t>(CHARACTER_CREATE_C2S::VT_BELONG, belong, 0);
  }
  void add_face(flatbuffers::Offset<common::CHARACTER_FACE> face) {
    fbb_.AddOffset(CHARACTER_CREATE_C2S::VT_FACE, face);
  }
  void add_equipment(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<common::CHARACTER_EQUIPMENT>>> equipment) {
    fbb_.AddOffset(CHARACTER_CREATE_C2S::VT_EQUIPMENT, equipment);
  }
  explicit CHARACTER_CREATE_C2SBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<CHARACTER_CREATE_C2S> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<CHARACTER_CREATE_C2S>(end);
    return o;
  }
};

inline flatbuffers::Offset<CHARACTER_CREATE_C2S> CreateCHARACTER_CREATE_C2S(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> nick_name = 0,
    common::CHARACTER_TYPE type = common::CHARACTER_TYPE_NONE,
    uint16_t belong = 0,
    flatbuffers::Offset<common::CHARACTER_FACE> face = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<common::CHARACTER_EQUIPMENT>>> equipment = 0) {
  CHARACTER_CREATE_C2SBuilder builder_(_fbb);
  builder_.add_equipment(equipment);
  builder_.add_face(face);
  builder_.add_nick_name(nick_name);
  builder_.add_belong(belong);
  builder_.add_type(type);
  return builder_.Finish();
}

inline flatbuffers::Offset<CHARACTER_CREATE_C2S> CreateCHARACTER_CREATE_C2SDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *nick_name = nullptr,
    common::CHARACTER_TYPE type = common::CHARACTER_TYPE_NONE,
    uint16_t belong = 0,
    flatbuffers::Offset<common::CHARACTER_FACE> face = 0,
    const std::vector<flatbuffers::Offset<common::CHARACTER_EQUIPMENT>> *equipment = nullptr) {
  auto nick_name__ = nick_name ? _fbb.CreateString(nick_name) : 0;
  auto equipment__ = equipment ? _fbb.CreateVector<flatbuffers::Offset<common::CHARACTER_EQUIPMENT>>(*equipment) : 0;
  return protocol::CreateCHARACTER_CREATE_C2S(
      _fbb,
      nick_name__,
      type,
      belong,
      face,
      equipment__);
}

struct CHARACTER_CREATE_S2C FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef CHARACTER_CREATE_S2CBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_RESULT = 4,
    VT_NICK_NAME = 6,
    VT_TYPE = 8,
    VT_BELONG = 10,
    VT_FACE = 12,
    VT_EQUIPMENT = 14,
    VT_LAST_MAP_ID = 16,
    VT_LAST_MAP_POSITION = 18
  };
  common::RESULT_CODE result() const {
    return static_cast<common::RESULT_CODE>(GetField<uint32_t>(VT_RESULT, 0));
  }
  const flatbuffers::String *nick_name() const {
    return GetPointer<const flatbuffers::String *>(VT_NICK_NAME);
  }
  common::CHARACTER_TYPE type() const {
    return static_cast<common::CHARACTER_TYPE>(GetField<uint8_t>(VT_TYPE, 0));
  }
  uint16_t belong() const {
    return GetField<uint16_t>(VT_BELONG, 0);
  }
  const common::CHARACTER_FACE *face() const {
    return GetPointer<const common::CHARACTER_FACE *>(VT_FACE);
  }
  const flatbuffers::Vector<flatbuffers::Offset<common::CHARACTER_EQUIPMENT>> *equipment() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<common::CHARACTER_EQUIPMENT>> *>(VT_EQUIPMENT);
  }
  uint32_t last_map_id() const {
    return GetField<uint32_t>(VT_LAST_MAP_ID, 0);
  }
  const common::VECTOR3 *last_map_position() const {
    return GetStruct<const common::VECTOR3 *>(VT_LAST_MAP_POSITION);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_RESULT) &&
           VerifyOffset(verifier, VT_NICK_NAME) &&
           verifier.VerifyString(nick_name()) &&
           VerifyField<uint8_t>(verifier, VT_TYPE) &&
           VerifyField<uint16_t>(verifier, VT_BELONG) &&
           VerifyOffset(verifier, VT_FACE) &&
           verifier.VerifyTable(face()) &&
           VerifyOffset(verifier, VT_EQUIPMENT) &&
           verifier.VerifyVector(equipment()) &&
           verifier.VerifyVectorOfTables(equipment()) &&
           VerifyField<uint32_t>(verifier, VT_LAST_MAP_ID) &&
           VerifyField<common::VECTOR3>(verifier, VT_LAST_MAP_POSITION) &&
           verifier.EndTable();
  }
};

struct CHARACTER_CREATE_S2CBuilder {
  typedef CHARACTER_CREATE_S2C Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_result(common::RESULT_CODE result) {
    fbb_.AddElement<uint32_t>(CHARACTER_CREATE_S2C::VT_RESULT, static_cast<uint32_t>(result), 0);
  }
  void add_nick_name(flatbuffers::Offset<flatbuffers::String> nick_name) {
    fbb_.AddOffset(CHARACTER_CREATE_S2C::VT_NICK_NAME, nick_name);
  }
  void add_type(common::CHARACTER_TYPE type) {
    fbb_.AddElement<uint8_t>(CHARACTER_CREATE_S2C::VT_TYPE, static_cast<uint8_t>(type), 0);
  }
  void add_belong(uint16_t belong) {
    fbb_.AddElement<uint16_t>(CHARACTER_CREATE_S2C::VT_BELONG, belong, 0);
  }
  void add_face(flatbuffers::Offset<common::CHARACTER_FACE> face) {
    fbb_.AddOffset(CHARACTER_CREATE_S2C::VT_FACE, face);
  }
  void add_equipment(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<common::CHARACTER_EQUIPMENT>>> equipment) {
    fbb_.AddOffset(CHARACTER_CREATE_S2C::VT_EQUIPMENT, equipment);
  }
  void add_last_map_id(uint32_t last_map_id) {
    fbb_.AddElement<uint32_t>(CHARACTER_CREATE_S2C::VT_LAST_MAP_ID, last_map_id, 0);
  }
  void add_last_map_position(const common::VECTOR3 *last_map_position) {
    fbb_.AddStruct(CHARACTER_CREATE_S2C::VT_LAST_MAP_POSITION, last_map_position);
  }
  explicit CHARACTER_CREATE_S2CBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<CHARACTER_CREATE_S2C> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<CHARACTER_CREATE_S2C>(end);
    return o;
  }
};

inline flatbuffers::Offset<CHARACTER_CREATE_S2C> CreateCHARACTER_CREATE_S2C(
    flatbuffers::FlatBufferBuilder &_fbb,
    common::RESULT_CODE result = common::RESULT_CODE_ERROR_FAIL,
    flatbuffers::Offset<flatbuffers::String> nick_name = 0,
    common::CHARACTER_TYPE type = common::CHARACTER_TYPE_NONE,
    uint16_t belong = 0,
    flatbuffers::Offset<common::CHARACTER_FACE> face = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<common::CHARACTER_EQUIPMENT>>> equipment = 0,
    uint32_t last_map_id = 0,
    const common::VECTOR3 *last_map_position = 0) {
  CHARACTER_CREATE_S2CBuilder builder_(_fbb);
  builder_.add_last_map_position(last_map_position);
  builder_.add_last_map_id(last_map_id);
  builder_.add_equipment(equipment);
  builder_.add_face(face);
  builder_.add_nick_name(nick_name);
  builder_.add_result(result);
  builder_.add_belong(belong);
  builder_.add_type(type);
  return builder_.Finish();
}

inline flatbuffers::Offset<CHARACTER_CREATE_S2C> CreateCHARACTER_CREATE_S2CDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    common::RESULT_CODE result = common::RESULT_CODE_ERROR_FAIL,
    const char *nick_name = nullptr,
    common::CHARACTER_TYPE type = common::CHARACTER_TYPE_NONE,
    uint16_t belong = 0,
    flatbuffers::Offset<common::CHARACTER_FACE> face = 0,
    const std::vector<flatbuffers::Offset<common::CHARACTER_EQUIPMENT>> *equipment = nullptr,
    uint32_t last_map_id = 0,
    const common::VECTOR3 *last_map_position = 0) {
  auto nick_name__ = nick_name ? _fbb.CreateString(nick_name) : 0;
  auto equipment__ = equipment ? _fbb.CreateVector<flatbuffers::Offset<common::CHARACTER_EQUIPMENT>>(*equipment) : 0;
  return protocol::CreateCHARACTER_CREATE_S2C(
      _fbb,
      result,
      nick_name__,
      type,
      belong,
      face,
      equipment__,
      last_map_id,
      last_map_position);
}

struct ENTER_MAP_C2S FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ENTER_MAP_C2SBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MAP_ID = 4
  };
  uint32_t map_id() const {
    return GetField<uint32_t>(VT_MAP_ID, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_MAP_ID) &&
           verifier.EndTable();
  }
};

struct ENTER_MAP_C2SBuilder {
  typedef ENTER_MAP_C2S Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_map_id(uint32_t map_id) {
    fbb_.AddElement<uint32_t>(ENTER_MAP_C2S::VT_MAP_ID, map_id, 0);
  }
  explicit ENTER_MAP_C2SBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<ENTER_MAP_C2S> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ENTER_MAP_C2S>(end);
    return o;
  }
};

inline flatbuffers::Offset<ENTER_MAP_C2S> CreateENTER_MAP_C2S(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t map_id = 0) {
  ENTER_MAP_C2SBuilder builder_(_fbb);
  builder_.add_map_id(map_id);
  return builder_.Finish();
}

struct ENTER_MAP_S2C FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ENTER_MAP_S2CBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_RESULT = 4,
    VT_MAP_ID = 6,
    VT_SERVER_TIME = 8
  };
  common::RESULT_CODE result() const {
    return static_cast<common::RESULT_CODE>(GetField<uint32_t>(VT_RESULT, 0));
  }
  uint32_t map_id() const {
    return GetField<uint32_t>(VT_MAP_ID, 0);
  }
  uint64_t server_time() const {
    return GetField<uint64_t>(VT_SERVER_TIME, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_RESULT) &&
           VerifyField<uint32_t>(verifier, VT_MAP_ID) &&
           VerifyField<uint64_t>(verifier, VT_SERVER_TIME) &&
           verifier.EndTable();
  }
};

struct ENTER_MAP_S2CBuilder {
  typedef ENTER_MAP_S2C Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_result(common::RESULT_CODE result) {
    fbb_.AddElement<uint32_t>(ENTER_MAP_S2C::VT_RESULT, static_cast<uint32_t>(result), 0);
  }
  void add_map_id(uint32_t map_id) {
    fbb_.AddElement<uint32_t>(ENTER_MAP_S2C::VT_MAP_ID, map_id, 0);
  }
  void add_server_time(uint64_t server_time) {
    fbb_.AddElement<uint64_t>(ENTER_MAP_S2C::VT_SERVER_TIME, server_time, 0);
  }
  explicit ENTER_MAP_S2CBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<ENTER_MAP_S2C> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ENTER_MAP_S2C>(end);
    return o;
  }
};

inline flatbuffers::Offset<ENTER_MAP_S2C> CreateENTER_MAP_S2C(
    flatbuffers::FlatBufferBuilder &_fbb,
    common::RESULT_CODE result = common::RESULT_CODE_ERROR_FAIL,
    uint32_t map_id = 0,
    uint64_t server_time = 0) {
  ENTER_MAP_S2CBuilder builder_(_fbb);
  builder_.add_server_time(server_time);
  builder_.add_map_id(map_id);
  builder_.add_result(result);
  return builder_.Finish();
}

struct ENTITY_SPAWN_S2C FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ENTITY_SPAWN_S2CBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ENTITY = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<common::ENTITY_SPAWN_INFO>> *entity() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<common::ENTITY_SPAWN_INFO>> *>(VT_ENTITY);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ENTITY) &&
           verifier.VerifyVector(entity()) &&
           verifier.VerifyVectorOfTables(entity()) &&
           verifier.EndTable();
  }
};

struct ENTITY_SPAWN_S2CBuilder {
  typedef ENTITY_SPAWN_S2C Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_entity(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<common::ENTITY_SPAWN_INFO>>> entity) {
    fbb_.AddOffset(ENTITY_SPAWN_S2C::VT_ENTITY, entity);
  }
  explicit ENTITY_SPAWN_S2CBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<ENTITY_SPAWN_S2C> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ENTITY_SPAWN_S2C>(end);
    return o;
  }
};

inline flatbuffers::Offset<ENTITY_SPAWN_S2C> CreateENTITY_SPAWN_S2C(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<common::ENTITY_SPAWN_INFO>>> entity = 0) {
  ENTITY_SPAWN_S2CBuilder builder_(_fbb);
  builder_.add_entity(entity);
  return builder_.Finish();
}

inline flatbuffers::Offset<ENTITY_SPAWN_S2C> CreateENTITY_SPAWN_S2CDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<common::ENTITY_SPAWN_INFO>> *entity = nullptr) {
  auto entity__ = entity ? _fbb.CreateVector<flatbuffers::Offset<common::ENTITY_SPAWN_INFO>>(*entity) : 0;
  return protocol::CreateENTITY_SPAWN_S2C(
      _fbb,
      entity__);
}

struct ENTITY_DESTROY_S2C FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ENTITY_DESTROY_S2CBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_UID = 4
  };
  uint64_t uid() const {
    return GetField<uint64_t>(VT_UID, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_UID) &&
           verifier.EndTable();
  }
};

struct ENTITY_DESTROY_S2CBuilder {
  typedef ENTITY_DESTROY_S2C Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_uid(uint64_t uid) {
    fbb_.AddElement<uint64_t>(ENTITY_DESTROY_S2C::VT_UID, uid, 0);
  }
  explicit ENTITY_DESTROY_S2CBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<ENTITY_DESTROY_S2C> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ENTITY_DESTROY_S2C>(end);
    return o;
  }
};

inline flatbuffers::Offset<ENTITY_DESTROY_S2C> CreateENTITY_DESTROY_S2C(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t uid = 0) {
  ENTITY_DESTROY_S2CBuilder builder_(_fbb);
  builder_.add_uid(uid);
  return builder_.Finish();
}

struct ENTITY_MOVE_VELOCITY_C2S FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ENTITY_MOVE_VELOCITY_C2SBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_EXCUTE_TIME = 4,
    VT_POSITION = 6,
    VT_FORWARD = 8,
    VT_SPEED = 10
  };
  uint64_t excute_time() const {
    return GetField<uint64_t>(VT_EXCUTE_TIME, 0);
  }
  const common::VECTOR3 *position() const {
    return GetStruct<const common::VECTOR3 *>(VT_POSITION);
  }
  const common::VECTOR3 *forward() const {
    return GetStruct<const common::VECTOR3 *>(VT_FORWARD);
  }
  float speed() const {
    return GetField<float>(VT_SPEED, 0.0f);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_EXCUTE_TIME) &&
           VerifyField<common::VECTOR3>(verifier, VT_POSITION) &&
           VerifyField<common::VECTOR3>(verifier, VT_FORWARD) &&
           VerifyField<float>(verifier, VT_SPEED) &&
           verifier.EndTable();
  }
};

struct ENTITY_MOVE_VELOCITY_C2SBuilder {
  typedef ENTITY_MOVE_VELOCITY_C2S Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_excute_time(uint64_t excute_time) {
    fbb_.AddElement<uint64_t>(ENTITY_MOVE_VELOCITY_C2S::VT_EXCUTE_TIME, excute_time, 0);
  }
  void add_position(const common::VECTOR3 *position) {
    fbb_.AddStruct(ENTITY_MOVE_VELOCITY_C2S::VT_POSITION, position);
  }
  void add_forward(const common::VECTOR3 *forward) {
    fbb_.AddStruct(ENTITY_MOVE_VELOCITY_C2S::VT_FORWARD, forward);
  }
  void add_speed(float speed) {
    fbb_.AddElement<float>(ENTITY_MOVE_VELOCITY_C2S::VT_SPEED, speed, 0.0f);
  }
  explicit ENTITY_MOVE_VELOCITY_C2SBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<ENTITY_MOVE_VELOCITY_C2S> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ENTITY_MOVE_VELOCITY_C2S>(end);
    return o;
  }
};

inline flatbuffers::Offset<ENTITY_MOVE_VELOCITY_C2S> CreateENTITY_MOVE_VELOCITY_C2S(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t excute_time = 0,
    const common::VECTOR3 *position = 0,
    const common::VECTOR3 *forward = 0,
    float speed = 0.0f) {
  ENTITY_MOVE_VELOCITY_C2SBuilder builder_(_fbb);
  builder_.add_excute_time(excute_time);
  builder_.add_speed(speed);
  builder_.add_forward(forward);
  builder_.add_position(position);
  return builder_.Finish();
}

struct ENTITY_MOVE_VELOCITY_S2C FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ENTITY_MOVE_VELOCITY_S2CBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_RESULT = 4,
    VT_UID = 6,
    VT_EXCUTE_TIME = 8,
    VT_POSITION = 10,
    VT_FORWARD = 12,
    VT_SPEED = 14,
    VT_SERVER_TIME = 16
  };
  common::RESULT_CODE result() const {
    return static_cast<common::RESULT_CODE>(GetField<uint32_t>(VT_RESULT, 0));
  }
  uint64_t uid() const {
    return GetField<uint64_t>(VT_UID, 0);
  }
  uint64_t excute_time() const {
    return GetField<uint64_t>(VT_EXCUTE_TIME, 0);
  }
  const common::VECTOR3 *position() const {
    return GetStruct<const common::VECTOR3 *>(VT_POSITION);
  }
  const common::VECTOR3 *forward() const {
    return GetStruct<const common::VECTOR3 *>(VT_FORWARD);
  }
  float speed() const {
    return GetField<float>(VT_SPEED, 0.0f);
  }
  uint64_t server_time() const {
    return GetField<uint64_t>(VT_SERVER_TIME, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_RESULT) &&
           VerifyField<uint64_t>(verifier, VT_UID) &&
           VerifyField<uint64_t>(verifier, VT_EXCUTE_TIME) &&
           VerifyField<common::VECTOR3>(verifier, VT_POSITION) &&
           VerifyField<common::VECTOR3>(verifier, VT_FORWARD) &&
           VerifyField<float>(verifier, VT_SPEED) &&
           VerifyField<uint64_t>(verifier, VT_SERVER_TIME) &&
           verifier.EndTable();
  }
};

struct ENTITY_MOVE_VELOCITY_S2CBuilder {
  typedef ENTITY_MOVE_VELOCITY_S2C Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_result(common::RESULT_CODE result) {
    fbb_.AddElement<uint32_t>(ENTITY_MOVE_VELOCITY_S2C::VT_RESULT, static_cast<uint32_t>(result), 0);
  }
  void add_uid(uint64_t uid) {
    fbb_.AddElement<uint64_t>(ENTITY_MOVE_VELOCITY_S2C::VT_UID, uid, 0);
  }
  void add_excute_time(uint64_t excute_time) {
    fbb_.AddElement<uint64_t>(ENTITY_MOVE_VELOCITY_S2C::VT_EXCUTE_TIME, excute_time, 0);
  }
  void add_position(const common::VECTOR3 *position) {
    fbb_.AddStruct(ENTITY_MOVE_VELOCITY_S2C::VT_POSITION, position);
  }
  void add_forward(const common::VECTOR3 *forward) {
    fbb_.AddStruct(ENTITY_MOVE_VELOCITY_S2C::VT_FORWARD, forward);
  }
  void add_speed(float speed) {
    fbb_.AddElement<float>(ENTITY_MOVE_VELOCITY_S2C::VT_SPEED, speed, 0.0f);
  }
  void add_server_time(uint64_t server_time) {
    fbb_.AddElement<uint64_t>(ENTITY_MOVE_VELOCITY_S2C::VT_SERVER_TIME, server_time, 0);
  }
  explicit ENTITY_MOVE_VELOCITY_S2CBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<ENTITY_MOVE_VELOCITY_S2C> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ENTITY_MOVE_VELOCITY_S2C>(end);
    return o;
  }
};

inline flatbuffers::Offset<ENTITY_MOVE_VELOCITY_S2C> CreateENTITY_MOVE_VELOCITY_S2C(
    flatbuffers::FlatBufferBuilder &_fbb,
    common::RESULT_CODE result = common::RESULT_CODE_ERROR_FAIL,
    uint64_t uid = 0,
    uint64_t excute_time = 0,
    const common::VECTOR3 *position = 0,
    const common::VECTOR3 *forward = 0,
    float speed = 0.0f,
    uint64_t server_time = 0) {
  ENTITY_MOVE_VELOCITY_S2CBuilder builder_(_fbb);
  builder_.add_server_time(server_time);
  builder_.add_excute_time(excute_time);
  builder_.add_uid(uid);
  builder_.add_speed(speed);
  builder_.add_forward(forward);
  builder_.add_position(position);
  builder_.add_result(result);
  return builder_.Finish();
}

struct ENTITY_MOVE_STOP_C2S FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ENTITY_MOVE_STOP_C2SBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_EXCUTE_TIME = 4,
    VT_POSITION = 6
  };
  uint64_t excute_time() const {
    return GetField<uint64_t>(VT_EXCUTE_TIME, 0);
  }
  const common::VECTOR3 *position() const {
    return GetStruct<const common::VECTOR3 *>(VT_POSITION);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_EXCUTE_TIME) &&
           VerifyField<common::VECTOR3>(verifier, VT_POSITION) &&
           verifier.EndTable();
  }
};

struct ENTITY_MOVE_STOP_C2SBuilder {
  typedef ENTITY_MOVE_STOP_C2S Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_excute_time(uint64_t excute_time) {
    fbb_.AddElement<uint64_t>(ENTITY_MOVE_STOP_C2S::VT_EXCUTE_TIME, excute_time, 0);
  }
  void add_position(const common::VECTOR3 *position) {
    fbb_.AddStruct(ENTITY_MOVE_STOP_C2S::VT_POSITION, position);
  }
  explicit ENTITY_MOVE_STOP_C2SBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<ENTITY_MOVE_STOP_C2S> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ENTITY_MOVE_STOP_C2S>(end);
    return o;
  }
};

inline flatbuffers::Offset<ENTITY_MOVE_STOP_C2S> CreateENTITY_MOVE_STOP_C2S(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t excute_time = 0,
    const common::VECTOR3 *position = 0) {
  ENTITY_MOVE_STOP_C2SBuilder builder_(_fbb);
  builder_.add_excute_time(excute_time);
  builder_.add_position(position);
  return builder_.Finish();
}

struct ENTITY_MOVE_STOP_S2C FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ENTITY_MOVE_STOP_S2CBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_RESULT = 4,
    VT_UID = 6,
    VT_EXCUTE_TIME = 8,
    VT_POSITION = 10,
    VT_SERVER_TIME = 12
  };
  common::RESULT_CODE result() const {
    return static_cast<common::RESULT_CODE>(GetField<uint32_t>(VT_RESULT, 0));
  }
  uint64_t uid() const {
    return GetField<uint64_t>(VT_UID, 0);
  }
  uint64_t excute_time() const {
    return GetField<uint64_t>(VT_EXCUTE_TIME, 0);
  }
  const common::VECTOR3 *position() const {
    return GetStruct<const common::VECTOR3 *>(VT_POSITION);
  }
  uint64_t server_time() const {
    return GetField<uint64_t>(VT_SERVER_TIME, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_RESULT) &&
           VerifyField<uint64_t>(verifier, VT_UID) &&
           VerifyField<uint64_t>(verifier, VT_EXCUTE_TIME) &&
           VerifyField<common::VECTOR3>(verifier, VT_POSITION) &&
           VerifyField<uint64_t>(verifier, VT_SERVER_TIME) &&
           verifier.EndTable();
  }
};

struct ENTITY_MOVE_STOP_S2CBuilder {
  typedef ENTITY_MOVE_STOP_S2C Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_result(common::RESULT_CODE result) {
    fbb_.AddElement<uint32_t>(ENTITY_MOVE_STOP_S2C::VT_RESULT, static_cast<uint32_t>(result), 0);
  }
  void add_uid(uint64_t uid) {
    fbb_.AddElement<uint64_t>(ENTITY_MOVE_STOP_S2C::VT_UID, uid, 0);
  }
  void add_excute_time(uint64_t excute_time) {
    fbb_.AddElement<uint64_t>(ENTITY_MOVE_STOP_S2C::VT_EXCUTE_TIME, excute_time, 0);
  }
  void add_position(const common::VECTOR3 *position) {
    fbb_.AddStruct(ENTITY_MOVE_STOP_S2C::VT_POSITION, position);
  }
  void add_server_time(uint64_t server_time) {
    fbb_.AddElement<uint64_t>(ENTITY_MOVE_STOP_S2C::VT_SERVER_TIME, server_time, 0);
  }
  explicit ENTITY_MOVE_STOP_S2CBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<ENTITY_MOVE_STOP_S2C> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ENTITY_MOVE_STOP_S2C>(end);
    return o;
  }
};

inline flatbuffers::Offset<ENTITY_MOVE_STOP_S2C> CreateENTITY_MOVE_STOP_S2C(
    flatbuffers::FlatBufferBuilder &_fbb,
    common::RESULT_CODE result = common::RESULT_CODE_ERROR_FAIL,
    uint64_t uid = 0,
    uint64_t excute_time = 0,
    const common::VECTOR3 *position = 0,
    uint64_t server_time = 0) {
  ENTITY_MOVE_STOP_S2CBuilder builder_(_fbb);
  builder_.add_server_time(server_time);
  builder_.add_excute_time(excute_time);
  builder_.add_uid(uid);
  builder_.add_position(position);
  builder_.add_result(result);
  return builder_.Finish();
}

}  // namespace protocol

#endif  // FLATBUFFERS_GENERATED_PROTOCOL_PROTOCOL_H_
